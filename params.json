{"name":"Komodo-Joomla-builder","tagline":"Create a Joomla file structure using Komodo and Grunt ","body":"# Komodo Joomla Builder\r\n## Description\r\nCreate a Joomla project infrastructure using Komodo and Grunt.\r\n\r\n## Background\r\nThis project is based on Komodo's Extension Generator where it would create a project file in a project directory and then populate the directory with Komodo's extension file structure with prompts to the user to input information for extension details and creating a manifest file with accompanying macros to modify the manifest file, build the extension and build and install the extension to Komodo.\r\n\r\n## Project Scope\r\nWith this project it will do a similar procedure in combination with GruntJS, plugins and Komodo macros to create the Joomla infrastructure, with the ability to modify and add Joomla files and functions, do syntax checks, ensure compliance with Joomla coding standards, use autocomplete for Joomla coding.\r\n\r\n## What is Joomla?\r\nJoomla is an award-winning content management system (CMS), which enables you to build Web sites and powerful online applications. Many aspects, including its ease-of-use and extensibility, have made Joomla the most popular Web site software available. Best of all, Joomla is an open source solution that is freely available to everyone.\r\nMore information can be found [here](http://www.joomla.org/)\r\n\r\n## What are the parts of Joomla?\r\n\r\n### Component\r\n\r\n### Plugin\r\n\r\n### Templates\r\n\r\n## Workflow\r\n## Download Komodo Joomla Builder\r\nAfter downloading and installing the Komodo Joomla builder file (Work In Progress (WIP))\r\n\r\n## Joomla naming convention\r\nJoomla requires that the naming convention of files and functions be consistent throughout the project to utilise the Joomla infrastructure.\r\n\r\n### Building Joomla component procedure\r\nThe first time the developer uses the builder they are prompted for default parameters.\r\nSuch as author name, email, url etc this information is stored in a config file for later reference.\r\nIt then displays a project help information outlying the workflow.\r\n\r\nIt does a check for global nodejs installation and prompts if not installed as this is required for grunt\r\nthen checks for global grunt installation and prompts if not installed.\r\n\r\n## Macros and their functions\r\n### Komodo Extension - Create Joomla Project Macros.\r\nCreate project, this adds macros to the Joomla project.\r\nModify User data, this modifies the user data that is used as default parameters.\r\nModify default Grunt parameters, Modify settings for Grunt.\r\nModify Grunt Plugins parameters, Modify settings for Grunt Plugins.\r\nAdd other plugins, add user defined plugins to grunt list.\r\nHelp, Local help file of how to use the builder.\r\n\r\n## Create Project macro flow\r\nUser selects 'Create project' macro\r\nUser selects type a component, plugin or template\r\ndefault parameters are read and displayed\r\nuser adds additional information\r\nuser selects project directory\r\n\r\nthe builder checks for local nodejs\r\nchecks for local grunt\r\nuser selects grunt plugins to install\r\nlist standard plugins\r\nallow user to add custom plugins\r\nGruntfile.js created with standard parameters\r\npackage.json created with standard parameters\r\n\r\nproject name is built with Joomla file infrastructure and files\r\ncreates projectname manifest file\r\n\r\n## Modify User data\r\nModify User data such as name, email etc\r\n\r\n## Modify default Grunt parameters macro flow\r\nModify settings for Grunt.\r\nlookup list of parameters\r\nselect true/false\r\nfile selection\r\ncustom functions\r\n\r\n## Modify Grunt Plugins parameters macro flow\r\nModify settings for Grunt Plugins.\r\nselect plugin name\r\nlookup list of parameters\r\nselect true/false\r\nfile selection\r\n\r\n## Add other plugins macro flow\r\nAdd user defined plugins to grunt list.\r\nAdd name\r\nadd url\r\n\r\n## Help macro flow\r\nLocal help file of how to use the builder.\r\nOption to add other help files.\r\n\r\n\r\n## Joomla Project Macros\r\nafter project is created\r\n### Modify plugin parameters\r\noptions to modify parameters of plugins\r\n\r\n### modify package.json\r\n\r\n### Build\r\nBuild project\r\n\r\n### Build and install\r\nChecks to see if project has been installed on Joomla Server\r\nBuild and install project onto Joomla server\r\n\r\n### FTP Config\r\nsetup ftp configuration\r\nurl\r\nport number\r\nlogin name\r\npassword\r\n\r\n### FTP Upload project\r\nselect files to upload\r\n\r\n## Run grunt on files\r\nrun grunt default\r\n\r\n## run grunt plugins on files\r\nrun selected grunt plugins\r\n\r\n## Clean up\r\nclean up temp files\r\n\r\n## Compress for deployment\r\ncompress files to zip\r\nexclude non essential files from zip\r\n\r\n## Other Functions\r\n\r\n## Autocomplete functions\r\nuser types in joomla specific code\r\n\r\nintelisense / autocomplete\r\n\r\nFor example if label is added ie MYPROJECT.THISISDESCRIPTION the builder then adds label data and prompts user to add text to the language file.\r\n\r\nif JFACTORY:: is typed a popup will display options and insert dummy values\r\n\r\n\r\n<script>\r\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\r\n\r\n  ga('create', 'UA-66284973-1', 'auto');\r\n  ga('send', 'pageview');\r\n\r\n</script>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}